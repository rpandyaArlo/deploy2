---


- name: Create database config
  template:
    src: dbconfig.xml.j2
    dest: "{{ atl_product_home }}/dbconfig.xml"
    owner: "{{ atl_product_user }}"

- name: Create cluster config
  template:
    src: cluster.properties.j2
    dest: "{{ atl_product_home }}/cluster.properties"
    owner: "{{ atl_product_user }}"

- name: Create server config
  template:
    src: server.xml.j2
    dest: "{{ atl_product_installation_versioned }}/conf/server.xml"

- name: Check for a jira-config.properties in the shared home
  stat:
    path: "{{ atl_product_home_shared }}/jira-config.properties"
  register: jira_config_properties

- name: Copy jira-config.properties if exists
  copy:
    remote_src: true
    src: "{{ atl_product_home_shared }}/jira-config.properties"
    dest: "{{ atl_product_home }}/jira-config.properties"
  when: jira_config_properties.stat.exists

- name: Override JVM memory settings.
  # Ugly but necessary as the product installs this file so we need to make the change here.
  lineinfile:
    path: "{{ atl_product_installation_versioned }}/bin/setenv.sh"
    backrefs: true
    regexp: "^{{ item }}="
    line: "{{ item }}=\"{{ atl_jvm_heap }}\""
  with_items:
    - 'JVM_MINIMUM_MEMORY'
    - 'JVM_MAXIMUM_MEMORY'

- name: Set Jira home directory
  lineinfile:
    path: "{{ atl_product_installation_versioned }}/bin/setenv.sh"
    regexp: "JIRA_HOME="
    line: 'JIRA_HOME="{{ atl_product_home }}"'

- name: Set the Tomcat environment
  lineinfile:
    path: "{{ atl_product_installation_versioned }}/bin/setenv.sh"
    insertafter: "EOF"
    line: 'export CATALINA_OPTS="${CATALINA_OPTS} {{ atl_catalina_opts }} {{ atl_catalina_opts_extra }}"'

- name: Set support recommended JVM args
  lineinfile:
    path: "{{ atl_product_installation_versioned }}/bin/setenv.sh"
    regexp: "JVM_SUPPORT_RECOMMENDED_ARGS="
    line: 'JVM_SUPPORT_RECOMMENDED_ARGS="{{ atl_jvm_opts }}"'

- name: Create application directories
  file:
    path: "{{ item }}"
    state: directory
    mode: 0750
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
  with_items:
    - "{{ atl_product_home }}"
    - "{{ atl_product_home_shared }}"
    - "{{ atl_product_shared_plugins }}"
  changed_when: false  # For Molecule idempotence check


- name: Limit permissions on the installation directory
  file:
    path: "{{ atl_product_installation_versioned }}"
    owner: "root"
    group: "root"
    mode: "u=rwX,g=rX,o=rX"
    recurse: true
  with_items:
    - "{{ atl_installer_temp }}"
    - "{{ atl_product_installation_versioned }}"
    - "{{ atl_product_version_cache_dir }}"
  changed_when: false  # For Molecule idempotence check

- name: Grant access to the product working directories
  file:
    path: "{{ item }}"
    state: directory
    mode: "u=rwX,g=rX,o-rwx"
    owner: "{{ atl_product_user }}"
    group: "{{ atl_product_user }}"
    recurse: true
  with_items:
    - "{{ atl_product_installation_versioned }}/logs"
    - "{{ atl_product_installation_versioned }}/temp"
    - "{{ atl_product_installation_versioned }}/work"
  changed_when: false  # For Molecule idempotence check

- name: Do something with stuff
  debug: "{{ item }}"
  with_items: stuff.stdout_lines

- name: Assert baseurl to same as atl_proxy_name (PostgreSQL)
  postgresql_query:
    login_host: "{{ atl_db_host }}"
    login_user: "{{ atl_jdbc_user }}"
    login_password: "{{ atl_jdbc_password }}"
    port: "{{ atl_db_port }}"
    db: "{{ atl_jdbc_db_name }}"
    query: >
      update propertystring set propertyvalue=%s
      where id=(select id from propertyentry where property_key = 'jira.baseurl')
    positional_args:
      - "{{ atl_tomcat_scheme }}://{{ atl_proxy_name }}{{ atl_tomcat_contextpath }}"
  when:
    - atl_proxy_name is defined
    - atl_tomcat_scheme is defined
    - db_created is undefined or not db_created.changed
    - atl_jdbc_engine_map[atl_db_engine] == 'postgres'
  tags:
    - skip_on_stack_update
  ignore_errors: yes  # For Molecule as it has no db test framework included
  

- name: Assert baseurl to same as atl_proxy_name (MySQL)
  command: >
    mysql --user={{ atl_jdbc_user }} --password={{ atl_jdbc_password }} {{ atl_jdbc_db_name }}
    --host={{ atl_db_host }} --port={{ atl_db_port }} --batch --skip-column-names
    --execute="update propertystring set propertyvalue="{{ atl_tomcat_scheme }}://{{ atl_proxy_name }}{{ atl_tomcat_contextpath }}"
      where id=(select id from propertyentry where property_key = 'jira.baseurl')"
  when:
    - atl_proxy_name is defined
    - atl_tomcat_scheme is defined
    - db_created is undefined or not db_created.changed
    - atl_jdbc_engine_map[atl_db_engine] == 'mysql'
  tags:
    - skip_on_stack_update
  ignore_errors: yes  # For Molecule as it has no db test framework included
